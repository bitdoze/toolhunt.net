---
import type { CollectionEntry } from 'astro:content';

type ToolEntry = CollectionEntry<'sh'> | CollectionEntry<'tools'> | CollectionEntry<'alternatives'>;

interface Props {
  entry: ToolEntry;
  showFullDetails?: boolean;
}

const { entry, showFullDetails = false } = Astro.props;
const { title, description, logo, category, publishedDate } = entry.data;

// Determine collection type and specific properties
const isShApp = 'alternativeTo' in entry.data && 'checkItUrl' in entry.data;
const isTool = !('alternativeTo' in entry.data) && 'checkItUrl' in entry.data;
const isAlternative = 'alternativeTo' in entry.data && !('checkItUrl' in entry.data);

// Get specific properties safely
const alternativeTo = isShApp || isAlternative ? (entry.data as any).alternativeTo : null;
const checkItUrl = isShApp || isTool ? (entry.data as any).checkItUrl : null;

// Format date
const formattedDate = new Date(publishedDate).toLocaleDateString('en-US', {
  year: 'numeric',
  month: 'short',
  day: 'numeric'
});
---

<article class={`bg-white dark:bg-gray-800 rounded-xl shadow-lg overflow-hidden transition-all duration-300 ${showFullDetails ? '' : 'hover:shadow-xl hover:-translate-y-1'}`}>
  <div class="p-6">
    <!-- Header -->
    <div class="flex items-start gap-4 mb-4">
      <img 
        src={logo} 
        alt={`${title} logo`} 
        class="w-16 h-16 object-contain rounded-lg bg-gray-50 dark:bg-gray-700 p-2"
      />
      <div class="flex-1 min-w-0">
        <h3 class="text-xl font-semibold truncate">
          <a href={`/${entry.collection}/${entry.slug}`} class="text-gray-900 dark:text-white hover:text-blue-600 dark:hover:text-blue-400 transition-colors">
            {title}
          </a>
        </h3>
        <div class="flex flex-wrap gap-2 mt-2">
          <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-100">
            {category}
          </span>
          {alternativeTo && (
            <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-purple-100 text-purple-800 dark:bg-purple-900 dark:text-purple-100">
              Alternative to {alternativeTo}
            </span>
          )}
        </div>
      </div>
    </div>

    <!-- Description -->
    <p class="text-gray-600 dark:text-gray-300 text-sm mb-4 line-clamp-2">
      {description}
    </p>

    <!-- Footer -->
    <div class="flex items-center justify-between mt-4">
      <time datetime={publishedDate.toISOString()} class="text-sm text-gray-500 dark:text-gray-400">
        {formattedDate}
      </time>
      
      {checkItUrl && (
        <a
          href={checkItUrl}
          target="_blank"
          rel="noopener noreferrer"
          class="inline-flex items-center px-3 py-1.5 text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 rounded-lg transition-colors"
        >
          Check it
          <svg class="w-4 h-4 ml-1.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14 5l7 7m0 0l-7 7m7-7H3" />
          </svg>
        </a>
      )}
    </div>
  </div>

  {showFullDetails && (
    <div class="px-6 pb-6">
      <div class="border-t border-gray-200 dark:border-gray-700 pt-4 mt-4">
        <h4 class="font-medium text-gray-900 dark:text-white mb-2">Key Features</h4>
        <ul class="space-y-2">
          {entry.data.keyFeatures.map((feature: string) => (
            <li class="flex items-start text-sm text-gray-600 dark:text-gray-300">
              <svg class="w-5 h-5 text-green-500 mr-2 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
              </svg>
              {feature}
            </li>
          ))}
        </ul>
      </div>
    </div>
  )}
</article>