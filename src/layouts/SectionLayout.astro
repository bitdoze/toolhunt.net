---
import BaseLayout from './BaseLayout.astro';
import SearchBar from '../components/SearchBar.astro';
import Filters from '../components/Filters.astro';
import ToolGrid from '../components/ToolGrid.astro';
import type { CollectionEntry } from 'astro:content';

type ToolEntry = CollectionEntry<'sh'> | CollectionEntry<'tools'> | CollectionEntry<'alternatives'>;

interface Props {
  title: string;
  description: string;
  tools: ToolEntry[];
  categories: string[];
  alternativeTo?: string[];
  showAlternativeTo?: boolean;
  currentPage: number;
  totalPages: number;
  section: 'sh' | 'tools' | 'alternatives';
}

const {
  title,
  description,
  tools,
  categories,
  alternativeTo = [],
  showAlternativeTo = false,
  currentPage,
  totalPages,
  section
} = Astro.props;

// Calculate pagination variables
const indexPageLink = currentPage === 2;
const hasPrevPage = currentPage > 1;
const hasNextPage = totalPages > currentPage;

// Generate page list
let pageList = [];
for (let i = 1; i <= totalPages; i++) {
  pageList.push(i);
}

// Prepare JSON-LD data for collection page
const jsonLd = {
  '@context': 'https://schema.org',
  '@type': 'CollectionPage',
  name: title,
  description: description,
  url: Astro.url.toString(),
  numberOfItems: tools.length,
  itemListElement: tools.map((tool, index) => ({
    '@type': 'ListItem',
    position: index + 1,
    item: {
      '@type': 'SoftwareApplication',
      name: tool.data.title,
      description: tool.data.description,
      image: tool.data.logo,
      applicationCategory: tool.data.category,
      ...(('checkItUrl' in tool.data) && { downloadUrl: tool.data.checkItUrl }),
      ...(('alternativeTo' in tool.data) && {
        sameAs: [
          `https://toolhunt.net/search?alternativeTo=${encodeURIComponent(tool.data.alternativeTo)}`
        ]
      })
    }
  }))
};

// Prepare meta description with category information
const metaDescription = `${description} Browse ${tools.length} tools across ${categories.length} categories${
  showAlternativeTo ? ` and find alternatives to popular services` : ''
}.`;
---

<BaseLayout
  title={title}
  description={metaDescription}
  jsonLd={jsonLd}
  noindex={currentPage > 1}
>
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
    <div class="flex flex-col lg:flex-row lg:space-x-8">
      <!-- Sidebar with filters -->
      <div class="lg:w-64 flex-shrink-0 mb-8 lg:mb-0">
        <div class="sticky top-24 space-y-6">
          <SearchBar />
          <Filters
            categories={categories}
            alternativeTo={alternativeTo}
            showAlternativeTo={showAlternativeTo}
          />
        </div>
      </div>

      <!-- Main content -->
      <div class="flex-1">
        <div class="mb-6">
          <h1 class="text-3xl font-bold text-gray-900 dark:text-white">{title}</h1>
          <p class="mt-2 text-gray-600 dark:text-gray-300">{description}</p>
        </div>

        <!-- Tools grid -->
        <div class="mb-8">
          <ToolGrid tools={tools} />
        </div>

        <!-- Pagination -->
        {totalPages > 1 && (
          <nav class="mb-4 flex justify-center space-x-2 text-center" aria-label="Pagination">
            {/* previous */}
            {hasPrevPage ? (
              <a
                href={indexPageLink ? `/${section}` : `/${section}/page/${currentPage - 1}`}
                class="border border-primary hover:bg-primary hover:text-white rounded-md h-10 w-10 leading-[36px] font-semibold text-dark flex items-center justify-center transition duration-200"
              >
                <span class="sr-only">Previous</span>
                <svg
                  class="h-5 w-5"
                  xmlns="http://www.w3.org/2000/svg"
                  viewBox="0 0 20 20"
                  fill="currentColor"
                  aria-hidden="true"
                >
                  <path
                    fill-rule="evenodd"
                    d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z"
                    clip-rule="evenodd"
                  />
                </svg>
              </a>
            ) : (
              <span class="border border-gray-400 opacity-40 rounded-md h-10 w-10 leading-[36px] font-semibold text-dark flex items-center justify-center pointer-events-none">
                <span class="sr-only">Previous</span>
                <svg
                  class="h-5 w-5"
                  xmlns="http://www.w3.org/2000/svg"
                  viewBox="0 0 20 20"
                  fill="currentColor"
                  aria-hidden="true"
                >
                  <path
                    fill-rule="evenodd"
                    d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z"
                    clip-rule="evenodd"
                  />
                </svg>
              </span>
            )}

            {/* page index */}
            {pageList.map((pagination, i) =>
              pagination === currentPage ? (
                <span
                  aria-current="page"
                  class={`border border-primary bg-primary rounded-md h-10 w-10 leading-[35px] font-semibold text-blue-500 dark:text-white`}
                >
                  {pagination}
                </span>
              ) : (
                <a
                  href={i === 0 ? `/${section}` : `/${section}/page/${pagination}`}
                  aria-current="page"
                  class={`border border-primary hover:bg-primary hover:text-blue-500 rounded-md h-10 w-10 leading-[36px] font-semibold text-dark flex items-center justify-center transition duration-200`}
                >
                  {pagination}
                </a>
              )
            )}

            {/* next page */}
            {hasNextPage ? (
              <a
                href={`/${section}/page/${currentPage + 1}`}
                class="border border-primary hover:bg-primary hover:text-white rounded-md h-10 w-10 leading-[36px] font-semibold text-dark flex items-center justify-center transition duration-200"
              >
                <span class="sr-only">Next</span>
                <svg
                  class="h-5 w-5"
                  xmlns="http://www.w3.org/2000/svg"
                  viewBox="0 0 20 20"
                  fill="currentColor"
                  aria-hidden="true"
                >
                  <path
                    fill-rule="evenodd"
                    d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z"
                    clip-rule="evenodd"
                  />
                </svg>
              </a>
            ) : (
              <span class="border border-gray-400 opacity-40 rounded-md h-10 w-10 leading-[36px] font-semibold text-dark flex items-center justify-center pointer-events-none">
                <span class="sr-only">Next</span>
                <svg
                  class="h-5 w-5"
                  xmlns="http://www.w3.org/2000/svg"
                  viewBox="0 0 20 20"
                  fill="currentColor"
                  aria-hidden="true"
                >
                  <path
                    fill-rule="evenodd"
                    d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z"
                    clip-rule="evenodd"
                  />
                </svg>
              </span>
            )}
          </nav>
        )}

      </div>
    </div>
  </div>
</BaseLayout>
