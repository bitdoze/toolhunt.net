---
import { getCollection } from 'astro:content';
import BaseLayout from '../../layouts/BaseLayout.astro';

export async function getStaticPaths() {
  const posts = await getCollection('blog');
  return posts.map(post => ({
    params: { slug: post.slug },
    props: { post },
  }));
}

const { post } = Astro.props;
const { Content } = await post.render();
---

<BaseLayout title={`${post.data.title} - ToolHunt Blog`} description={post.data.description}>
  <article class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8 py-12">
    {post.data.image && (
      <img
        src={post.data.image}
        alt={post.data.title}
        class="w-full aspect-video object-cover rounded-2xl mb-8"
      />
    )}
    <div class="flex gap-2 mb-4">
      {post.data.tags.map((tag: string) => (
        <span class="inline-flex items-center px-3 py-1 rounded-full text-sm font-medium bg-blue-100 dark:bg-blue-800 text-blue-800 dark:text-blue-100">
          {tag}
        </span>
      ))}
    </div>
    <h1 class="text-4xl md:text-5xl font-bold text-gray-900 dark:text-white mb-4 tracking-tight">
      {post.data.title}
    </h1>
    <div class="flex items-center gap-4 text-gray-600 dark:text-gray-400 mb-8">
      <span>{post.data.author}</span>
      <span>â€¢</span>
      <time datetime={post.data.publishedDate.toISOString()}>
        {new Date(post.data.publishedDate).toLocaleDateString('en-US', {
          year: 'numeric',
          month: 'long',
          day: 'numeric'
        })}
      </time>
    </div>
    <div class="prose prose-lg dark:prose-invert max-w-none">
      <Content />
    </div>

    {/* Related Articles Section */}
    <div class="mt-16 border-t border-gray-200 dark:border-gray-700 pt-12">
      <h2 class="text-3xl font-bold text-gray-900 dark:text-white mb-8">Related Articles</h2>
      <div class="grid gap-8 md:grid-cols-3">
        {(async () => {
          const allPosts = await getCollection('blog');
          const relatedPosts = allPosts
            .filter(p => p.slug !== post.slug) // Exclude current post
            .filter(p => p.data.tags.some(tag => post.data.tags.includes(tag))) // Posts with matching tags
            .sort(() => Math.random() - 0.5) // Randomize the order
            .slice(0, 3); // Take up to 3 posts

          // If no related posts found, get random posts
          const postsToShow = relatedPosts.length > 0 ? relatedPosts : 
            allPosts
              .filter(p => p.slug !== post.slug)
              .sort(() => Math.random() - 0.5)
              .slice(0, 3);

          return postsToShow.map(relatedPost => (
            <a href={`/blog/${relatedPost.slug}`} class="group">
              <article class="bg-white dark:bg-gray-800 rounded-2xl shadow-lg overflow-hidden transition-all duration-300 hover:shadow-xl border border-gray-100/50 dark:border-gray-700/50">
                {relatedPost.data.image && (
                  <img
                    src={relatedPost.data.image}
                    alt={relatedPost.data.title}
                    class="w-full aspect-video object-cover"
                  />
                )}
                <div class="p-6">
                  <div class="flex gap-2 mb-3">
                    {relatedPost.data.tags.map((tag: string) => (
                      <span class="inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium bg-blue-100 dark:bg-blue-800 text-blue-800 dark:text-blue-100">
                        {tag}
                      </span>
                    ))}
                  </div>
                  <h3 class="text-xl font-semibold text-gray-900 dark:text-white mb-2 group-hover:text-blue-600 dark:group-hover:text-blue-400">
                    {relatedPost.data.title}
                  </h3>
                  <p class="text-gray-600 dark:text-gray-400 text-sm">
                    {new Date(relatedPost.data.publishedDate).toLocaleDateString('en-US', {
                      year: 'numeric',
                      month: 'long',
                      day: 'numeric'
                    })}
                  </p>
                </div>
              </article>
            </a>
          ));
        })()}
      </div>
    </div>
  </article>
</BaseLayout>